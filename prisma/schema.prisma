datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // host WITHOUT .pooler.
  directUrl = env("DIRECT_URL")        // pooled 6543 host
}

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}


model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  role          String     @default("user")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  AuditLog      AuditLog[]
  surveyHistories SurveyHistory[] 
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  timestamp DateTime @default(now())
}


model SurveyProgress {
  id        Int      @id @default(autoincrement())
  responses String
  timestamp DateTime
  createdAt DateTime @default(now())
}

model SurveyHistory {
  id        Int      @id @default(autoincrement())
  responses String   // Store responses as JSON
  timestamp DateTime
  createdAt DateTime @default(now())
  status    String   // e.g., "In Progress", "Completed"
  lastSection String? // Track the last section the user was at in the survey
  userId      String?   // foreign key
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}
